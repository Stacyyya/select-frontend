language: node_js
node_js:
  - "8"


before_script: yarn install --frozen-lockfile

cache:
  yarn: true
  key: "$CI_COMMIT_REF_SLUG"
  directories:
    - node_modules/

jobs:
  include:
    - stage: build
      if: branch = develop AND type = push
      name: "build:dev"
      script:
        - unset ASSET_PATH
        - unset SENTRY_DSN
        - yarn webpack
      env:
        - SELECT_URL=https://select.ridi.io
        - SELECT_API=https://select-api.dev.ridi.io
        - STORE_URL=https://master.test.ridi.io
        - STORE_API=https://master.test.ridi.io
        - PAY_URL=https://pay.ridi.io
        - ACCOUNT_API=https://account.dev.ridi.io
        - OAUTH2_CLIENT_ID=${DEV_OAUTH2_CLIENT_ID}
      addons:
        artifacts:
          paths:
            - dist/
    -
      if: branch IN (master, /release\/.*/, /hotfix\/.*/) AND type = push
      name: "build:prod"
      script:
        - yarn build
      addons:
        artifacts:
          paths:
            - dist/
    - stage: deploy
      name: "develop"
      if: branch = develop AND type = push
      image: ridibooks/gitlab-ci-docker-aws
      cache: {}
      before_script: []
      variables:
        - S3_STAGING_FILE=s3://${PROD_S3_BUCKET}/staging.html
        - S3_RELEASE_CANDIDATE_FILE=s3://${PROD_S3_BUCKET}/releases/${TRAVIS_PULL_REQUEST_SLUG}.html
        - S3_RELEASE_PARAMS="--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
        - S3_ASSETS_PARAMS="--cache-control public,max-age=31536000"
        - AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY}
      script:
        - aws s3 sync dist s3://${DEV_S3_BUCKET} --exclude "staging.html" ${S3_ASSETS_PARAMS}
        - aws s3 cp s3://${DEV_S3_BUCKET}/index.html s3://${DEV_S3_BUCKET}/index.html ${S3_RELEASE_PARAMS}
      env:
        - name=develop
        - url=https://select.ridi.io
    -
      if: branch = master AND type = push
      name: "staging"
      image: ridibooks/gitlab-ci-docker-aws
      cache: {}
      before_script: []
      variables:
        - S3_STAGING_FILE=s3://${PROD_S3_BUCKET}/staging.html
        - S3_RELEASE_CANDIDATE_FILE=s3://${PROD_S3_BUCKET}/releases/${TRAVIS_PULL_REQUEST_SLUG}.html
        - S3_RELEASE_PARAMS="--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
        - S3_ASSETS_PARAMS="--cache-control public,max-age=31536000"
        - AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
      script:
        - aws s3 sync dist s3://${PROD_S3_BUCKET} --exclude "index.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
        - aws s3 cp ${S3_STAGING_FILE} ${S3_STAGING_FILE} ${S3_RELEASE_PARAMS}
      env:
        - name=staging
        - url=https://select.ridibooks.com
    -
      if: branch = /release\/.*/ AND type = push
      name: "production"
      image: ridibooks/gitlab-ci-docker-aws
      cache: {}
      before_script: []
      variables:
        - S3_STAGING_FILE=s3://${PROD_S3_BUCKET}/staging.html
        - S3_RELEASE_CANDIDATE_FILE=s3://${PROD_S3_BUCKET}/releases/${TRAVIS_PULL_REQUEST_SLUG}.html
        - S3_RELEASE_PARAMS="--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
        - S3_ASSETS_PARAMS="--cache-control public,max-age=31536000"
        - AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
      script:
        - aws s3 cp ${S3_RELEASE_CANDIDATE_FILE} s3://${PROD_S3_BUCKET}/index.html ${S3_RELEASE_PARAMS}
      env:
        - name=production
        - url=https://select.ridibooks.com
    -
      if: branch = master AND type = push
      name: "release-candidate"
      image: ridibooks/gitlab-ci-docker-aws
      cache: {}
      before_script: []
      variables:
        - S3_STAGING_FILE=s3://${PROD_S3_BUCKET}/staging.html
        - S3_RELEASE_CANDIDATE_FILE=s3://${PROD_S3_BUCKET}/releases/${TRAVIS_PULL_REQUEST_SLUG}.html
        - S3_RELEASE_PARAMS="--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
        - S3_ASSETS_PARAMS="--cache-control public,max-age=31536000"
        - AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
      script:
        - aws s3 sync dist s3://${PROD_S3_BUCKET} --exclude "*.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
        - aws s3 cp dist/index.html ${S3_RELEASE_CANDIDATE_FILE}
    -
      name: "sourcemaps"
      image: getsentry/sentry-cli
      cache: {}
      before_script: []
      if: branch = master AND type = push
      variables:
        SENTRY_LOG_LEVEL: debug
      script:
        - sentry-cli releases new ${TRAVIS_PULL_REQUEST_SLUG}
        - sentry-cli releases files ${TRAVIS_PULL_REQUEST_SLUG} upload-sourcemaps ${CI_PROJECT_DIR}/dist/*.map
        - sentry-cli releases finalize ${TRAVIS_PULL_REQUEST_SLUG}
    -
      if: branch = master AND type = push
      name: "serverless"
      variables:
        - AWS_ACCESS_KEY_ID=${SLS_AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${SLS_AWS_SECRET_ACCESS_KEY}
      cache: {}
      before_script:
        - cd serverless
        - yarn install --frozen-lockfile
      script:
        - yarn serverless deploy --stage production -v