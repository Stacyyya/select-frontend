version: 2.0
orbs:
  aws-s3: circleci/aws-s3@1.0.9

build: &build
  docker:
    - image: node:carbon-alpine

build-prestep: &build-steps
  - save_cache:
    key: ${CIRCLE_BRANCH}
    paths:
      - node_modules/
  - run:
    name: "install yarn packages"
    command: yarn install --frozen-lockfile

deploy-environment: &deploy-environment
  - run:
    environment:
      S3_STAGING_FILE: s3://${PROD_S3_BUCKET}/staging.html
      S3_RELEASE_CANDIDATE_FILE: s3://${PROD_S3_BUCKET}/releases/${CIRCLE_SHA1}.html
      S3_RELEASE_PARAMS: "--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
      S3_ASSETS_PARAMS: "--cache-control public,max-age=31536000"

develop-aws-key: &develop-aws-key
  aws-access-key-id: ${DEV_AWS_ACCESS_KEY_ID}
  aws-secret-access-key: ${DEV_AWS_SECRET_ACCESS_KEY}

production-aws-key: &production-aws-key
  aws-access-key-id: ${PROD_AWS_ACCESS_KEY_ID}
  aws-secret-access-key: ${PROD_AWS_SECRET_ACCESS_KEY}

production-sync: &production-sync
  from: dist
  to: s3://${PROD_S3_BUCKET}
  <<: *production-aws-key

jobs:
  develop-build:
    <<: *build
    branches:
      only: develop
    steps:
      <<: *build-prestep
      - run:
        name: "devlop build"
        command: |
          unset ASSET_PATH
          unset SENTRY_DSN
          yarn webpack
      - store_artifacts:
        path: dist/
      - run:
        environment:
          SELECT_URL: https://select.ridi.io
          SELECT_API: https://select-api.dev.ridi.io
          STORE_URL: https://master.test.ridi.io
          STORE_API: https://master.test.ridi.io
          PAY_URL: https://pay.ridi.io
          ACCOUNT_API: https://account.dev.ridi.io
          OAUTH2_CLIENT_ID: ${DEV_OAUTH2_CLIENT_ID}
  prouction-build:
    <<: *build
    branches:
      only: master
    steps:
      <<: *build-prestep
      - run:
        name: "production build"
        command: |
          yarn build
      - store_artifacts:
        path: dist/
      - run:
        environment:
          #변수 선언
  test-deploy:
    branches:
      only: master
    steps:
      <<: *deploy-environment
      # dev 배포 ------------------------------------
      - aws-s3/sync:
        from: dist
        to: s3://${DEV_S3_BUCKET}
        <<: *develop-aws-key
        arguments: --exclude "staging.html" ${S3_ASSETS_PARAMS}
      - aws-s3/copy:
        from: s3://${DEV_S3_BUCKET}/index.html
        to: s3://${DEV_S3_BUCKET}/index.html
        <<: *develop-aws-key
        arguments: ${S3_RELEASE_PARAMS}
      # staging 배포 ------------------------------------
      - aws-s3/sync:
        <<: *production-sync
        arguments: --exclude "index.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
      - aws-s3/copy:
        from: $S3_STAGING_FILE
        to: $S3_STAGING_FILE
        <<: *production-aws-key
        arguments: ${S3_RELEASE_PARAMS}
      # candidate 배포 ------------------------------------
      - aws-s3/sync:
        <<: *production-sync
        arguments: --exclude "*.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
      - aws-s3/copy:
        from: dist/index.html
        to: ${S3_RELEASE_CANDIDATE_FILE}
        <<: *production-aws-key
  production-deploy:
    branches:
      only: /release\/.*/
    steps:
      <<: *deploy-environment
      - aws-s3/copy:
        from: ${S3_RELEASE_CANDIDATE_FILE}
        to: s3://${PROD_S3_BUCKET}/index.html
        <<: *production-aws-key
        arguments: ${S3_RELEASE_PARAMS}
  sourcemaps:
    docker:
      - image: getsentry/sentry-cli
    steps:
      - run:
        environment:
          SENTRY_LOG_LEVEL: debug
      - deploy:
        command: |
          sentry-cli releases new ${CIRCLE_SHA1}
          sentry-cli releases files ${CIRCLE_SHA1} upload-sourcemaps ${HOME}/dist/*.map
          sentry-cli releases finalize ${CIRCLE_SHA1}
  serverless:
    <<: *build
    branches:
      only: master
    steps:
      - run:
        environment:
          AWS_ACCESS_KEY_ID: ${SLS_AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY: ${SLS_AWS_SECRET_ACCESS_KEY}
      - run:
        name: "before serverless deploy script"
        command: |
          cd serverless
          yarn install --frozen-lockfile
      - run:
        name: run serverless deploy script
        command: yarn serverless deploy --stage production -v
