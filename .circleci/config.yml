version: 2.0
orbs:
  aws-s3: circleci/aws-s3@1.0.9

set_default_excuter: &set_default_excuter
  docker:
    - image: node:carbon-alpine

build_save_cache: &build_save_cache
  save_cache:
    key: ${CIRCLE_BRANCH}
    paths: node_modules/

install_yarn_packages: &install_yarn_packages
  run:
    name: "install yarn packages"
    command: yarn install --frozen-lockfile

deploy_environment: &deploy_environment
  run:
    environment:
      S3_STAGING_FILE: s3://${PROD_S3_BUCKET}/staging.html
      S3_RELEASE_CANDIDATE_FILE: s3://${PROD_S3_BUCKET}/releases/${CIRCLE_SHA1}.html
      S3_RELEASE_PARAMS: "--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
      S3_ASSETS_PARAMS: "--cache-control public,max-age=31536000"
    command: echo 'set s3 variables'

develop_aws_key: &develop_aws_key
  aws-access-key-id: ${DEV_AWS_ACCESS_KEY_ID}
  aws-secret-access-key: ${DEV_AWS_SECRET_ACCESS_KEY}

production_aws_key: &production_aws_key
  aws-access-key-id: ${PROD_AWS_ACCESS_KEY_ID}
  aws-secret-access-key: ${PROD_AWS_SECRET_ACCESS_KEY}

production_sync: &production_sync
  from: dist
  to: s3://${PROD_S3_BUCKET}
  <<: *production_aws_key

jobs:
  develop-build:
    <<: *set_default_excuter
    steps:
      - *build_save_cache
      - *install_yarn_packages
      - run:
          name: "devlop build"
          environment:
            SELECT_URL: https://select.ridi.io
            SELECT_API: https://select-api.dev.ridi.io
            STORE_URL: https://master.test.ridi.io
            STORE_API: https://master.test.ridi.io
            PAY_URL: https://pay.ridi.io
            ACCOUNT_API: https://account.dev.ridi.io
            OAUTH2_CLIENT_ID: ${DEV_OAUTH2_CLIENT_ID}
          command: |
            unset ASSET_PATH
            unset SENTRY_DSN
            yarn webpack
      - store_artifacts:
          path: dist/
  production-build:
    <<: *set_default_excuter
    steps:
      - *build_save_cache
      - *install_yarn_packages
      - run:
          name: "production build"
          command: |
            yarn build
      - store_artifacts:
          path: dist/
  test-deploy:
    <<: *set_default_excuter
    steps:
      - *deploy_environment
      # dev 배포 ------------------------------------
      - aws-s3/sync:
          from: dist
          to: s3://${DEV_S3_BUCKET}
          <<: *develop_aws_key
          arguments: --exclude "staging.html" ${S3_ASSETS_PARAMS}
      - aws-s3/copy:
          from: s3://${DEV_S3_BUCKET}/index.html
          to: s3://${DEV_S3_BUCKET}/index.html
          <<: *develop_aws_key
          arguments: ${S3_RELEASE_PARAMS}
      # staging 배포 ------------------------------------
      - aws-s3/sync:
          <<: *production_sync
          arguments: --exclude "index.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
      - aws-s3/copy:
          from: $S3_STAGING_FILE
          to: $S3_STAGING_FILE
          <<: *production_aws_key
          arguments: ${S3_RELEASE_PARAMS}
      # candidate 배포 ------------------------------------
      - aws-s3/sync:
          <<: *production_sync
          arguments: --exclude "*.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
      - aws-s3/copy:
          from: dist/index.html
          to: ${S3_RELEASE_CANDIDATE_FILE}
          <<: *production_aws_key
  production-deploy:
    <<: *set_default_excuter
    steps:
      - *deploy_environment
      - aws-s3/copy:
          from: ${S3_RELEASE_CANDIDATE_FILE}
          to: s3://${PROD_S3_BUCKET}/index.html
          <<: *production_aws_key
          arguments: ${S3_RELEASE_PARAMS}
  sourcemaps:
    docker:
      - image: getsentry/sentry-cli
    steps:
      - run:
          environment:
            SENTRY_LOG_LEVEL: debug
      - deploy:
          command: |
            sentry-cli releases new ${CIRCLE_SHA1}
            sentry-cli releases files ${CIRCLE_SHA1} upload-sourcemaps ${HOME}/dist/*.map
            sentry-cli releases finalize ${CIRCLE_SHA1}
  serverless:
    <<: *set_default_excuter
    steps:
      - run:
          name: "before serverless deploy script"
          environment:
            AWS_ACCESS_KEY_ID: ${SLS_AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${SLS_AWS_SECRET_ACCESS_KEY}
          command: |
            cd serverless
            yarn install --frozen-lockfile
      - run:
          name: run serverless deploy script
          command: yarn serverless deploy --stage production -v

workflows:
  version: 2
  build-develop-env:
    jobs:
      - develop-build
  build-and-deploy-test-env:
    jobs:
      - production-build:
          filters:
            branches:
              only: master
      - test-deploy:
          requires:
            - production-build
  deploy-production:
    jobs:
      - production-build:
          filters:
            branches:
              only: /release\/.*/
      - production-deploy:
          requires:
            - production-build
      - sourcemaps:
          requires:
            - production-build
      - serverless:
          requires:
            - production-build